name: Publish artifacts
on:
  release:
    types:
      - created

jobs:
  sentry_release:
    runs-on: ubuntu-latest-m
    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Node and NPM
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm

      - name: Install and build
        run: |
          npm install
          npm run postinstall
          npm run build
        env:
          NODE_OPTIONS: '--max_old_space_size=8192'
      - name: Create sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: production
          sourcemaps: './release/app/dist'
          version: ${{ github.ref }}

  publish_linux:
    runs-on: ubuntu-latest-m
    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3

      - name: Install Node and NPM
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm

      - name: Install and build
        run: |
          npm install
          npm run postinstall
          npm run build
        env:
          NODE_OPTIONS: '--max_old_space_size=8192'

      - name: Build and Publish
        env:
          # This is used for uploading release assets to github
          GH_TOKEN: ${{ secrets.GH_DESKTOP_RELEASE_TOKEN }}
        run: |
          npm exec electron-builder -- --publish always --linux

  publish_win:
    runs-on: windows-latest-l
    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3

      - name: Install Node and NPM
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm

      - name: Install and build
        run: |
          npm install
          npm run postinstall
          npm run build
        env:
          NODE_OPTIONS: '--max_old_space_size=8192'

      - name: Build artifacts
        run: |
          npm exec electron-builder -- --publish never --win

      - id: get_version
        uses: battila7/get-version-action@v2

      - name: Sign Artifact with CodeSignTool
        uses: sslcom/esigner-codesign@develop
        with:
          # Sign and timestamp code object.
          command: sign
          # SSL.com account username
          username: ${{ secrets.ESIGNER_USERNAME }}
          # SSL.com account password.
          password: ${{ secrets.ESIGNER_PASSWORD }}
          # Credential ID for signing certificate.
          credential_id: ${{ secrets.ESIGNER_CREDENTIAL_ID }}
          # OAuth TOTP Secret (https://www.ssl.com/how-to/automate-esigner-ev-code-signing)

          totp_secret: ${{ secrets.ESIGNER_TOTP_SECRET }}
          dir_path: ${GITHUB_WORKSPACE}/release/build
          output_path: ${GITHUB_WORKSPACE}/release/signed
          file_path: '"${GITHUB_WORKSPACE}/release/build/Kapeta Setup ${{steps.get_version.outputs.version-without-v}}.exe"'
          # Scan code before sign
          malware_block: false
          # Environment Name, For Production 'PROD' or For Staging 'TEST'
          environment_name: PROD
      - name: copy latest.yml
        run: |
          cp release/build/latest.yml release/signed/latest.yml
          mv "release/signed/Kapeta Setup ${{steps.get_version.outputs.version-without-v}}.exe" release/signed/Kapeta-Setup-${{steps.get_version.outputs.version-without-v}}.exe

      - name: recalculate hash
        run: npm run recalculate-hash release/signed/latest.yml

      - name: Upload binaries to release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GHA_TOKEN }}
          file: release/signed/*
          tag: ${{ github.ref }}
          overwrite: true
          file_glob: true
          repo_name: kapetacom/kapeta-desktop
          body: |
            **Changes:**
            ${{ github.event.release.body }}

  publish_mac:
    runs-on: macos-latest
    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3

      - name: Install Node and NPM
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: npm

      - name: Ensure distutils
        run: python3 -m pip install distutils

      - name: Install and build
        run: |
          npm install
          npm run postinstall
          npm run build
        env:
          NODE_OPTIONS: '--max_old_space_size=8192'

      - name: Publish releases
        env:
          # These values are used for auto updates signing
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          CSC_LINK: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
          CSC_KEY_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          # This is used for uploading release assets to github
          GH_TOKEN: ${{ secrets.GH_DESKTOP_RELEASE_TOKEN }}
        run: |
          npm exec electron-builder -- --publish always --mac
