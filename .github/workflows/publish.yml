name: Publish artifacts
on:
    release:
        types:
            - created

jobs:
    publish_linux:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout git repo
              uses: actions/checkout@v3

            - name: Install Node and NPM
              uses: actions/setup-node@v3
              with:
                  node-version: 18
                  cache: npm

            - name: Install and build
              run: |
                  npm install
                  npm run postinstall
                  npm run build

            - name: Build and Publish
              env:
                  # This is used for uploading release assets to github
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  npm exec electron-builder -- --publish always --linux

    publish_win:
        runs-on: windows-latest
        steps:
            - name: Checkout git repo
              uses: actions/checkout@v3

            - name: Install Node and NPM
              uses: actions/setup-node@v3
              with:
                  node-version: 18
                  cache: npm

            - name: Install and build
              run: |
                  npm install
                  npm run postinstall
                  npm run build

            - name: Build artifacts
              run: |
                  npm exec electron-builder -- --publish never --win

            - id: get_version
              uses: battila7/get-version-action@v2

            - name: Sign Artifact with CodeSignTool
              uses: sslcom/esigner-codesign@develop
              with:
                  # Sign and timestamp code object.
                  command: sign
                  # SSL.com account username
                  username: ${{ secrets.ESIGNER_USERNAME }}
                  # SSL.com account password.
                  password: ${{ secrets.ESIGNER_PASSWORD }}
                  # Credential ID for signing certificate.
                  credential_id: ${{ secrets.ESIGNER_CREDENTIAL_ID }}
                  # OAuth TOTP Secret (https://www.ssl.com/how-to/automate-esigner-ev-code-signing)

                  totp_secret: ${{ secrets.ESIGNER_TOTP_SECRET }}
                  dir_path: ${GITHUB_WORKSPACE}/release/build
                  file_path: ${GITHUB_WORKSPACE}/release/build/Kapeta\ Setup\ ${{steps.get_version.outputs.version-without-v}}.exe
                  # Scan code before sign
                  malware_block: false
                  # Environment Name, For Production 'PROD' or For Staging 'TEST'
                  environment_name: PROD

            - name: Upload binaries to release
              uses: svenstaro/upload-release-action@v2
              with:
                repo_token: ${{ secrets.GITHUB_TOKEN }}
                file: release/build/*
                tag: ${{ github.ref }}
                overwrite: true
                file_glob: true

    publish_mac:
        runs-on: macos-latest
        steps:
            - name: Checkout git repo
              uses: actions/checkout@v3

            - name: Install Node and NPM
              uses: actions/setup-node@v3
              with:
                  node-version: 18
                  cache: npm

            - name: Install and build
              run: |
                  npm install
                  npm run postinstall
                  npm run build

            - name: Publish releases
              env:
                  # These values are used for auto updates signing
                  APPLE_ID: ${{ secrets.APPLE_ID }}
                  APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
                  APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
                  APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
                  CSC_LINK: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
                  CSC_KEY_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
                  # This is used for uploading release assets to github
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  npm exec electron-builder -- --publish always --mac
